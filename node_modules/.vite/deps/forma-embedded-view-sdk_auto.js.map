{
  "version": 3,
  "sources": ["../../forma-embedded-view-sdk/dist/internal/analysis.js", "../../forma-embedded-view-sdk/dist/internal/areaMetrics.js", "../../forma-embedded-view-sdk/dist/internal/elements.js", "../../forma-embedded-view-sdk/dist/internal/extensions.js", "../../forma-embedded-view-sdk/dist/internal/generators.js", "../../forma-embedded-view-sdk/dist/internal/geometry.js", "../../forma-embedded-view-sdk/dist/internal/iframe-messenger.js", "../../forma-embedded-view-sdk/dist/internal/integrate.js", "../../forma-embedded-view-sdk/dist/internal/library.js", "../../forma-embedded-view-sdk/dist/internal/predictive-analysis.js", "../../forma-embedded-view-sdk/dist/internal/project.js", "../../forma-embedded-view-sdk/dist/internal/proposal.js", "../../forma-embedded-view-sdk/dist/internal/queued-pub-sub.js", "../../forma-embedded-view-sdk/dist/internal/scene/camera.js", "../../forma-embedded-view-sdk/dist/internal/scene/design-tool.js", "../../forma-embedded-view-sdk/dist/internal/scene/renderGlb.js", "../../forma-embedded-view-sdk/dist/internal/scene/render.js", "../../forma-embedded-view-sdk/dist/internal/scene/sun.js", "../../forma-embedded-view-sdk/dist/internal/scene/terrain.js", "../../forma-embedded-view-sdk/dist/internal/selection.js", "../../forma-embedded-view-sdk/dist/internal/version.js", "../../forma-embedded-view-sdk/dist/internal/embedded-view.js", "../../forma-embedded-view-sdk/dist/auto.js"],
  "sourcesContent": ["// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { EmbeddedViewSdk } from \"./embedded-view.js\";\n/**\n * Interact with Forma's native [analysis functionality](https://aps.autodesk.com/en/docs/forma/v1/embedded-views/useful-concepts/analysis/).\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.analysis | analysis}.\n */\nexport class AnalysisApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Fetch analysis records connected to the currently open proposal.\n     *\n     * @returns\n     * List of relevant analysis records.\n     *\n     * @example\n     * // Fetch all sun analysis records.\n     * // Filter to only include those in SUCCEEDED state.\n     * const sunAnalyses = await Forma.analysis.list({ analysisTypes: [\"sun\"] })\n     * const succeededSunAnalyses = sunAnalyses.filter(analysis => analysis.status === \"SUCCEEDED\")\n     */\n    async list(request) {\n        return await this.#iframeMessenger.sendRequest(\"analysis/list\", request);\n    }\n    /**\n     * @beta\n     * Trigger a\n     * [noise analysis](https://aps.autodesk.com/en/docs/forma/v1/embedded-views/useful-concepts/analysis/noise/)\n     * based on the traffic data connected to roads and railways in the proposal. Computes A-weighted decibel levels.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns Analysis record for the newly triggered analysis.\n     *\n     * @example\n     * // Trigger noise analysis on selected elements\n     * const currentlySelected = await Forma.selection.getSelected()\n     * const sunAnalysis = await Forma.analysis.triggerNoise({\n     *    selectedElementPaths: currentlySelected\n     * })\n     * @remarks\n     * Noise analysis is a Beta feature of Autodesk Forma.\n     *\n     */\n    async triggerNoise(request) {\n        return await this.#iframeMessenger.sendRequest(\"analysis/trigger-noise\", request);\n    }\n    /**\n     * Trigger a\n     * [sun analysis](https://aps.autodesk.com/en/docs/forma/v1/embedded-views/useful-concepts/analysis/sun/)\n     * for a specific day of the year. Computes sun exposure in hours.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns\n     * Analysis record for the newly triggered analysis.\n     *\n     * @example\n     * // Trigger sun analysis on selected elements for the summer solstice\n     * const currentlySelected = await Forma.selection.getSelected()\n     * const sunAnalysis = await Forma.analysis.triggerSun({\n     *    selectedElementPaths: currentlySelected,\n     *    month: 6,\n     *    date: 21\n     * })\n     */\n    async triggerSun(request) {\n        return await this.#iframeMessenger.sendRequest(\"analysis/trigger-sun\", request);\n    }\n    /**\n     * Fetch a specific sun analysis.\n     *\n     * @returns\n     * Information about the sun analysis.\n     */\n    async getSunAnalysis(request) {\n        return await this.#iframeMessenger.sendRequest(\"analysis/get-sun-analysis\", request);\n    }\n    /**\n     * Fetch a specific noise analysis.\n     *\n     * @returns\n     * Information about the noise analysis.\n     *\n     * @remarks\n     * Noise analysis is a Beta feature of Autodesk Forma.\n     */\n    async getNoiseAnalysis(request) {\n        return await this.#iframeMessenger.sendRequest(\"analysis/get-noise-analysis\", request);\n    }\n    /**\n     * Fetch\n     * [ground grid result](https://aps.autodesk.com/en/docs/forma/v1/embedded-views/useful-concepts/analysis/)\n     * for a sun or noise analysis.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns\n     * Ground grid containing results for the requested analysis.\n     *\n     * @example\n     * // Fetch ground grid for the first listed succeeded sun analysis\n     * const sunAnalyses = await Forma.analysis.list({ analysisTypes: [\"sun\"] })\n     * const succeededSunAnalyses = sunAnalyses.filter(analysis => analysis.status === \"SUCCEEDED\")\n     * const groundGrid = await Forma.analysis.getGroundGrid({ analysis: succeededSunAnalyses[0] })\n     *\n     * @remarks\n     * Noise analysis is a Beta feature of Autodesk Forma.\n     */\n    async getGroundGrid(request) {\n        return await this.#iframeMessenger.sendRequest(\"analysis/get-ground-grid\", request);\n    }\n}\n", "/**\n * Calculate [area metrics](https://help.autodeskforma.com/en/articles/6995661-introduction-to-area-metrics).\n *\n * @remarks\n * Available via {@link index.EmbeddedViewSdk.areaMetrics | EmbeddedViewSdk.areaMetrics}.\n */\nexport class AreaMetricsApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Calculate area metrics for the given paths.\n     * If no paths are given, the metrics will be calculated for all elements.\n     *\n     * @returns\n     * Area metrics for the given paths.\n     *\n     * @example\n     * // Calculate area metrics for selected elements\n     * const currentlySelected = await Forma.selection.getSelected()\n     * const areaMetrics = await Forma.areaMetrics.calculate({\n     *   paths: currentlySelected\n     * })\n     */\n    async calculate(request) {\n        return await this.#iframeMessenger.sendRequest(\"area-metrics/get\", request);\n    }\n}\n", "// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { EmbeddedViewSdk } from \"./embedded-view.js\";\n/**\n * The Elements API allows you to create elements in a selection of Forma elements systems.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.elements | elements}.\n */\nexport class ElementsApi {\n    floorStack;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.floorStack = new FloorStackApi(iframeMessenger);\n    }\n}\n/**\n * API for creating Floor Stack buildings.\n *\n * You can use this API together with the Forma.proposal.addElement\n * API to create a building and add it to a the current proposal.\n *\n * @example\n * // Create a building with 3 floors with a 2 meter setback\n * // Place it where the user clicks in the scene\n * const { urn } = await Forma.elements.floorStack.createFromFloors({\n *  floors: [\n *   {\n *    polygon: [ [0, 0], [10, 0], [10, 10], [0, 10], [0, 0] ],\n *    height: 3,\n *   },\n *   {\n *    polygon: [ [0, 0], [10, 0], [10, 10], [0, 10], [0, 0] ],\n *    height: 2.6,\n *   },\n *   {\n *    polygon: [ [0, 0], [10, 0], [10, 8], [0, 8], [0, 0] ],\n *    height: 2.6,\n *   },\n *  ],\n * })\n * const point = await Forma.designTool.getPoint()\n * if (!point) return\n * const transform = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, point.x, point.y, point.z, 1]\n * await Forma.proposal.addElement({ urn, transform });\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.elements | elements}.{@link elements.ElementsApi.floorStack | floorStack}.\n */\nexport class FloorStackApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Create a 2.5D building from a stack of floors.\n     *\n     * By 2.5D, we mean that the building only has vertical walls and flat roofs.\n     * The floors are given from bottom to top.\n     *\n     * Requires edit access to the project. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns URN of the created building element.\n     */\n    async createFromFloors(request) {\n        const response = await this.#iframeMessenger.sendRequest(\"elements/floor-stack-v2/create-from-floors\", request);\n        return response;\n    }\n}\n", "// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { EmbeddedViewSdk } from \"./embedded-view.js\";\n/**\n * Access extension-specific services, e.g. registered endpoints and cloud storage.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.extensions | extensions}.\n */\nexport class ExtensionsApi {\n    #iframeMessenger;\n    storage;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n        this.storage = new ExtensionsStorageApi(iframeMessenger);\n    }\n    // TODO: Link to more documentation on how to register endpoints for extensions.\n    /**\n     * Invoke an extension-specific endpoint.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @typeParam T - Type of data returned by endpoint.\n     *\n     * @returns The data returned by the endpoint.\n     *\n     */\n    async invokeEndpoint(request) {\n        return (await this.#iframeMessenger.sendRequest(\"extensions/invoke-endpoint\", request));\n    }\n}\n/**\n * Extension storage provides a way for extension authors to save data in a given authcontext\n * which the extension is installed for without needing their own storage layer.\n *\n * Any data can be stored and fetched directly via the SDK. Data is stored in\n * AWS S3 and accessed using presigned URLs. This way we only act as a proxy for\n * generating the presigned links without ever having an opinion on what data is\n * actually stored.\n *\n * NOTE: Even though extension authors can write data on behalf of a user in a specific context, it's\n * still the user who owns the data, and can they can access it without going through the extension\n * itself.\n *\n * @see https://aws.amazon.com/s3/\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.extensions | extensions}.{@link extensions.ExtensionsApi.storage | storage}.\n */\nexport class ExtensionsStorageApi {\n    #iframeMessenger;\n    #textDecoder = new TextDecoder();\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Add or replace a storage object.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @example\n     * // STORE JSON\n     * const myObject = {\n     *  someData: \"someValue\"\n     * }\n     *\n     * await Forma.extensions.storage.setObject({key: \"some-key\", data: JSON.stringify(myObject)})\n     *\n     * @example\n     * // STORE Float32Array\n     *\n     * function arrayToBuffer(array: Float32Array): ArrayBuffer {\n     *   const buffer = new ArrayBuffer(array.length * Float32Array.BYTES_PER_ELEMENT);\n     *   const arr = new Float32Array(buffer);\n     *   arr.set(array);\n     *   return arr;\n     * }\n     *\n     * const arr = new Float32Array(100).fill(Math.random())\n     * await Forma.extensions.storage.setObject({key: \"someKey\", data: arrayToBuffer(arr)})\n     *\n     */\n    async setObject(request) {\n        const url = await this.#iframeMessenger.sendRequest(\"extension-installation-storage/set\", {\n            key: request.key,\n            metadata: request.metadata,\n        });\n        const awsRes = await fetch(url, {\n            method: \"PUT\",\n            body: request.data,\n        });\n        if (!awsRes.ok) {\n            throw new Error(`Failed to put data to S3: ${awsRes.status}: ${awsRes.statusText}`);\n        }\n    }\n    /**\n     * Utility function to fetch string objects without needing to decode an array buffer.\n     *\n     * @returns The data parsed as UTF-8, including metadata if present.\n     *\n     * @example\n     * // READING JSON\n     * const res = await Forma.extensions.storage.getTextObject({\n     *   key: \"some-key\",\n     * })\n     * if (!res) {\n     *    return\n     * }\n     * const metadata = JSON.parse(data.metadata ?? \"{}\")\n     * const data = res.data\n     *\n     * @example\n     * function loadImageFromEncodedPng(\n     *   url: string,\n     * ): Promise<HtmlImageElement> {\n     *   return new Promise((resolve, reject) => {\n     *     const img = new Image()\n     *     img.onload = () => {\n     *       resolve(img)\n     *     }\n     *     img.onerror = () => {\n     *       reject(new Error(\"Failed to load image\"))\n     *     }\n     *     img.src = url\n     *   })\n     * }\n     *\n     * async function createCanvasFromDataUrl(\n     *   url: string,\n     * ): Promise<HtmlCanvasElement | void> {\n     *  const canvas = document.createElement(\"canvas\")\n     *  const ctx = canvas.getContext(\"2d\")\n     *  const img = await loadImage(url)\n     *  canvas.height = img.height\n     *  canvas.width = img.width\n     *  ctx.drawImage(ctx, img, 0, 0)\n     *  return canvas\n     * }\n     *\n     * const res = await Forma.extensions.storage.getTextObject({\n     *   key: \"some-png-key\",\n     * })\n     * if (!res) {\n     *    return\n     * }\n     * const canvas = createCanvasFromDataUrl(res.data)\n     *\n     */\n    async getTextObject(request) {\n        const res = await this.#iframeMessenger.sendRequest(\"extension-installation-storage/get\", request);\n        if (!res) {\n            return;\n        }\n        return {\n            ...res,\n            data: this.#textDecoder.decode(res.data),\n        };\n    }\n    /**\n     * Fetch the data for the specified key.\n     *\n     * Use this function when you're **not** fetching text data, such as geometry\n     * or analysis results.\n     *\n     * @returns The data as an ArrayBuffer, including metadata if present.\n     *\n     * @example\n     * const res = await Forma.extensions.storage.getBinaryObject({\n     *   key: \"my-float32-array\",\n     * })\n     * if (!res) {\n     *  return\n     * }\n     * const terrainSlope: Float32Array = new Float32Array(res.data)\n     * const metadata = JSON.parse(res.metadata ?? \"{}\")\n     *\n     */\n    async getBinaryObject(request) {\n        return await this.#iframeMessenger.sendRequest(\"extension-installation-storage/get\", request);\n    }\n    /**\n     * List all storage objects for the extension in the current authcontext.\n     *\n     * @returns List of filtered objects with relevant information.\n     *\n     * @example\n     * const availableObjects = await Forma.extensions.storage.listObjects().results\n     */\n    async listObjects(request) {\n        return await this.#iframeMessenger.sendRequest(\"extension-installation-storage/list\", request);\n    }\n    /**\n     * Delete object corresponding to the specified key.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @example\n     * // Store a JSON object and delete it afterwards\n     * const myObject = {\n     *  someData: \"someValue\"\n     * }\n     * await Forma.extensions.storage.setObject({key: \"some-key\", data: JSON.stringify(myObject)})\n     * await Forma.extensions.storage.deleteObject({key: \"some-key\"}})\n     */\n    async deleteObject(request) {\n        await this.#iframeMessenger.sendRequest(\"extension-installation-storage/delete\", request);\n    }\n}\n", "/**\n * Manage [generators](https://aps.autodesk.com/en/docs/forma/v1/http-specification/generators-api/) registered in Forma.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.generators | generators}.\n */\nexport class GeneratorsApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Create or replace a generator.\n     *\n     * @returns The created or replaced generator resource model.\n     */\n    async put(request) {\n        return await this.#iframeMessenger.sendRequest(\"generators/put\", request);\n    }\n    /**\n     * List out generators within the specified authcontext.\n     *\n     * @returns List of registered generators.\n     */\n    async list(request) {\n        return await this.#iframeMessenger.sendRequest(\"generators/list\", {\n            authcontext: request?.authcontext,\n        });\n    }\n}\n", "/**\n * Read geometry data from Forma.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.geometry | geometry}.\n */\nexport class GeometryApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Fetch paths of all elements in a proposal tagged with a specific category.\n     * Traverses the element tree to also find any nested children tagged as well.\n     *\n     * @returns\n     * List of paths to elements tagged with the given category.\n     *\n     * @example\n     * // Fetch all paths to buildings in the current proposal.\n     * const buildingPaths = await Forma.geometry.getPathsByCategory({ category: \"buildings\" })\n     */\n    async getPathsByCategory(request) {\n        return await this.#iframeMessenger.sendRequest(\"geometry/get-paths-by-category\", request);\n    }\n    /**\n     * Fetch the paths of all elements in a proposal with the property 'virtual' set to true.\n     * Traverses the element tree to also find any nested children tagged as well.\n     *\n     * The virtual property can be used to describe something that isn't real,\n     * like a constraint or an illustrative boy with balloon. If this is set,\n     * analyses and possibly other modes will ignore the element.\n     *\n     * @returns\n     * List of paths to elements tagged as virtual.\n     *\n     * @example\n     * // Fetch paths to all elements in the current proposal that are virtual.\n     * const virtualElementPaths = await Forma.geometry.getPathsForVirtualElements()\n     */\n    async getPathsForVirtualElements(request) {\n        return await this.#iframeMessenger.sendRequest(\"geometry/get-paths-for-virtual-elements\", { urn: request?.urn });\n    }\n    /**\n     * Fetch footprint representation of an element. Does not traverse children of\n     * the element, so if any of them have footprint representations which\n     * are of interest they need to be fetched separately using their complete path.\n     *\n     * @returns\n     * Footprint representation of the element pointed to by the given path.\n     *\n     * @example\n     * // Fetch footprint of the first found proposal site limit.\n     * const siteLimitPaths = await Forma.geometry.getPathsByCategory({ category: \"site_limit\" })\n     * const siteLimitFootprint = await Forma.geometry.getFootprint({ path: siteLimitPaths[0] })\n     */\n    async getFootprint(request) {\n        return await this.#iframeMessenger.sendRequest(\"geometry/get-footprint\", request);\n    }\n    /**\n     * Fetch mesh representation of an element and its children. Traverses the\n     * element tree to also find any nested children with the `volumeMesh` representation.\n     * All found meshes are concatenated into a flat list of triangles.\n     *\n     * @returns\n     * Mesh representation (list of triangles with vertex coordinates represented\n     * as `Float32`s) of the element pointed to by the given path and its children.\n     *\n     * @example\n     * // Fetch mesh representation for the entire proposal and count the number of triangles.\n     * const mesh = await Forma.geometry.getTriangles()\n     * const numberOfTriangles = mesh.length / 3\n     *\n     * @example\n     * // Fetch mesh representation for one of the elements with category building and its children.\n     * const buildingPaths = await Forma.geometry.getPathsByCategory({category: \"building\"})\n     * if (buildingPaths.length > 0 ) {\n     *    const mesh = await Forma.geometry.getTriangles({path: buildingPaths[0]})\n     * }\n     *\n     * @example\n     * // Fetch mesh representation for the entire proposal except elements with category vegetation and their children.\n     * const vegetationPaths = await Forma.geometry.getPathsByCategory({category: \"vegetation\"})\n     * const mesh = await Forma.geometry.getTriangles({excludedPaths: vegetationPaths})\n     */\n    async getTriangles(request) {\n        return await this.#iframeMessenger.sendRequest(\"geometry/get-triangles\", {\n            path: request?.path,\n            urn: request?.urn,\n            excludedPaths: request?.excludedPaths,\n        });\n    }\n}\n", "/**\n * Structured error that can be used for errors on requests,\n * such as data validation errors.\n *\n * A handler can throw this error and it will properly be serialized\n * as part of the reply and deserialized on the other side. This allows\n * to return errors with additional context as a low-level primitive.\n */\nexport class RequestError extends Error {\n    type;\n    data;\n    constructor(message, type, data, options) {\n        super(message, {\n            cause: options?.cause,\n        });\n        this.type = type;\n        this.data = data;\n    }\n}\nfunction parseErrorPayload(payload) {\n    if (payload instanceof Error) {\n        return payload;\n    }\n    if (payload != null &&\n        typeof payload === \"object\" &&\n        \"message\" in payload &&\n        typeof payload.message === \"string\" &&\n        \"type\" in payload &&\n        typeof payload.type === \"string\" &&\n        \"data\" in payload) {\n        return new RequestError(payload.message, payload.type, payload.data);\n    }\n    // We don't expect this to happen, as we should either\n    // be returning actual Error objects or our custom structure.\n    console.error(\"Unknown error\", payload);\n    throw new Error(\"Unknown error occurred. See console\");\n}\nfunction toErrorPayload(error) {\n    if (error instanceof RequestError) {\n        return {\n            message: error.message,\n            type: error.type,\n            data: error.data,\n        };\n    }\n    return error;\n}\nconst messageTypeRequest = \"IFRAME-MESSAGE-REQUEST\";\nconst messageTypeResponse = \"IFRAME-MESSAGE-RESPONSE\";\nconst messageTypeEvent = \"IFRAME-MESSAGE-EVENT\";\nconst connectEventAction = \"_connect\";\nconst disconnectEventAction = \"_disconnect\";\nconst createSubscriptionRequestAction = \"_createSubscription\";\nconst removeSubscriptionRequestAction = \"_removeSubscription\";\nconst subscriptionEventAction = \"_subscriptionEvent\";\n/** Check if the message data received is a request. */\nfunction isRequest(data) {\n    return (typeof data === \"object\" &&\n        data != null &&\n        \"id\" in data &&\n        \"action\" in data &&\n        \"type\" in data &&\n        data.type === messageTypeRequest);\n}\n/** Check if the message data received is a response. */\nfunction isResponse(data) {\n    return (typeof data === \"object\" &&\n        data != null &&\n        \"id\" in data &&\n        \"type\" in data &&\n        data.type == messageTypeResponse);\n}\n/** Check if the message data received is an event. */\nfunction isEvent(data) {\n    return (typeof data === \"object\" &&\n        data != null &&\n        \"action\" in data &&\n        \"type\" in data &&\n        data.type === messageTypeEvent);\n}\nvar State;\n(function (State) {\n    /** While initialized it will also respond to connect events. */\n    State[\"INITIALIZED\"] = \"initialized\";\n    /** The connecting state means we have sent a connect message. */\n    State[\"CONNECTING\"] = \"connecting\";\n    State[\"ESTABLISHED\"] = \"established\";\n    State[\"DISCONNECTED\"] = \"disconnected\";\n})(State || (State = {}));\nclass PubSub {\n    #delegate = new EventTarget();\n    subscribe(type, handler) {\n        const internalHandler = (_event) => {\n            const event = _event;\n            handler(event.detail);\n        };\n        this.#delegate.addEventListener(type, internalHandler);\n        return () => {\n            this.#delegate.removeEventListener(type, internalHandler);\n        };\n    }\n    publish(type, data) {\n        this.#delegate.dispatchEvent(new CustomEvent(type, {\n            detail: data,\n        }));\n    }\n}\n/**\n * IframeMessenger handles communication in/out of an iframe.\n *\n * It creates an abstraction on top of the Window.postMessage() browser\n * API to make it more convenient to handle states, message passing\n * and routing messages to handlers.\n *\n * Functionality provided:\n *\n * - Sending requests and waiting for the response for it. Think of it\n *   as a way of doing async functions across browser windows. Since the\n *   cross-window communcation is async itself, there is no support for\n *   synchronous requests.\n *\n * - Sending events to the other window. Events are one-way messages that\n *   do not expect a reply. Use cases for this is rare, and in most\n *   cases solved by subscriptions instead.\n *\n * - Subscriptions. This is a way to subscribe to specific events from the\n *   other window. The window that exposes a subscription source will contain\n *   a handler that can emit events for it when the subscription is created.\n *   This allows for lazy event streams that are only created when needed.\n *\n *   Internally subscriptions are built on top of both requests (creating and\n *   deleting subscriptions) and events mentioned above.\n *\n *   Subscriptions are unsubscribed automatically on disconnect.\n *\n * - Connected callbacks. This allows to add logic that should happen\n *   as soon as the connection between the windows are established.\n *\n * By default messages are queued until the connection is established,\n * so the user does not have to be concerned about connection details.\n *\n * When an iframe is removed from DOM, the connection should be explicitly\n * disconnected by calling disconnect() to trigger proper cleanup.\n *\n * @hidden\n * @internal\n */\nexport class IframeMessenger {\n    #state = State.INITIALIZED;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    #subscriptionEventHandlers = new Map();\n    #unsubscribeHandlers = new Map();\n    debug;\n    #internalEvents = new PubSub();\n    source;\n    sourceOrigin;\n    incomingMessageInterceptorResolver;\n    outgoingMessageInterceptorResolver;\n    requestResolver;\n    eventResolver;\n    subscribeResolver;\n    constructor(options) {\n        this.source = options.source;\n        this.sourceOrigin = options.sourceOrigin;\n        this.requestResolver = options.requestResolver;\n        this.eventResolver = options.eventResolver;\n        this.subscribeResolver = options.subscribeResolver;\n        this.debug = options.debug ?? false;\n        this.incomingMessageInterceptorResolver =\n            options.incomingMessageInterceptorResolver;\n        this.outgoingMessageInterceptorResolver =\n            options.outgoingMessageInterceptorResolver;\n        this.#internalEvents.subscribe(\"state\", ({ state }) => {\n            if (state === State.DISCONNECTED) {\n                this.#unsubscribeAllHandlers();\n            }\n        });\n        window.addEventListener(\"message\", this.#messageHandler);\n    }\n    connect() {\n        if (this.#state === State.INITIALIZED ||\n            this.#state === State.DISCONNECTED) {\n            this.#sendEventInternal(connectEventAction, null, false).catch((e) => {\n                console.error(\"Sending connect action failed\", e);\n            });\n            this.#setState(State.CONNECTING);\n        }\n    }\n    disconnect() {\n        this.#sendEventInternal(disconnectEventAction, null, false).catch((e) => {\n            console.error(\"Sending disconnect action failed\", e);\n        });\n        this.#setState(State.DISCONNECTED);\n    }\n    /**\n     * Subscribe to state transitions for being connected and\n     * from being connected to disconnected.\n     *\n     * This essentially acts as a boolean flag if it is connected\n     * or not.\n     */\n    onStateChange(handler) {\n        return this.#internalEvents.subscribe(\"state\", ({ state, prevState }) => {\n            if (state === State.ESTABLISHED && prevState !== State.ESTABLISHED) {\n                handler(\"connected\");\n            }\n            else if (state !== State.ESTABLISHED &&\n                prevState === State.ESTABLISHED) {\n                handler(\"disconnected\");\n            }\n        });\n    }\n    #setState(state) {\n        const prevState = this.#state;\n        this.#state = state;\n        this.#internalEvents.publish(\"state\", {\n            state,\n            prevState,\n        });\n    }\n    get isConnected() {\n        return this.#state === State.ESTABLISHED;\n    }\n    /**\n     * Wait for the state to be connected.\n     *\n     * If a disconnect (e.g. due to unmount) is requested before being\n     * connected, the promise will be rejected to ensure the promise\n     * is fulfilled.\n     */\n    connectedPromise() {\n        if (this.isConnected) {\n            return Promise.resolve();\n        }\n        if (this.debug) {\n            console.log(\"connectedPromise waiting for connection...\");\n        }\n        return new Promise((resolve, reject) => {\n            const unsubscribe = this.#internalEvents.subscribe(\"state\", ({ state }) => {\n                switch (state) {\n                    case State.DISCONNECTED:\n                        unsubscribe();\n                        reject(new Error(\"Disconnected\"));\n                        break;\n                    case State.ESTABLISHED:\n                        unsubscribe();\n                        resolve();\n                        break;\n                }\n            });\n        });\n    }\n    #processIncomingMessage = (message) => {\n        const interceptor = this.incomingMessageInterceptorResolver?.();\n        if (!interceptor) {\n            return message;\n        }\n        const result = interceptor(message);\n        if (this.debug) {\n            console.log(\"Resulting data after message interceptor\", result);\n        }\n        return result;\n    };\n    #processOutgoingMessage = (message, transfer, request) => {\n        const interceptor = this.outgoingMessageInterceptorResolver?.();\n        if (!interceptor) {\n            return message;\n        }\n        // Make sure we can safely mutate the message in the interceptor.\n        // For incoming messages we don't need to do this as the message\n        // has already been structured cloned by the browser.\n        const messageCopy = structuredClone(message, {\n            transfer: transfer ?? [],\n        });\n        const result = interceptor(messageCopy, {\n            request,\n        });\n        if (this.debug) {\n            console.log(\"Resulting data after message interceptor\", result);\n        }\n        return result;\n    };\n    #messageHandler = (message) => {\n        // This method will be called on all \"message\" events.\n        // We need to filter only those we want to handle.\n        const source = message.source;\n        if (source == null ||\n            source !== this.source ||\n            (this.sourceOrigin != null && message.origin !== this.sourceOrigin)) {\n            return;\n        }\n        if (this.debug) {\n            console.log(`Message from origin ${message.origin}:`, message.data);\n        }\n        const data = this.#processIncomingMessage(message.data);\n        if (isEvent(data)) {\n            this.#handleEvent(data);\n        }\n        if (isRequest(data)) {\n            this.#handleRequest(data, message, source);\n        }\n    };\n    #handleConnectAction(payload) {\n        if (this.#state !== State.INITIALIZED && this.#state !== State.CONNECTING) {\n            return;\n        }\n        if (!payload?.ack) {\n            const response = {\n                ack: true,\n            };\n            this.#sendEventInternal(connectEventAction, response, false).catch((e) => {\n                console.error(\"Sending event failed\", e);\n            });\n        }\n        this.#setState(State.ESTABLISHED);\n    }\n    #handleDisconnectAction(payload) {\n        if (this.#state === State.DISCONNECTED) {\n            return;\n        }\n        if (!payload?.ack) {\n            const response = {\n                ack: true,\n            };\n            this.#sendEventInternal(disconnectEventAction, response, false).catch((e) => {\n                console.error(\"Sending event failed\", e);\n            });\n        }\n        this.#setState(State.DISCONNECTED);\n    }\n    #handleEvent(message) {\n        if (message.action === connectEventAction) {\n            this.#handleConnectAction(message.payload);\n            return;\n        }\n        if (message.action === disconnectEventAction) {\n            this.#handleDisconnectAction(message.payload);\n            return;\n        }\n        if (message.action === subscriptionEventAction) {\n            this.#handleSubscriptionEvent(message.payload);\n            return;\n        }\n        if (this.eventResolver) {\n            const handler = this.eventResolver(message.action);\n            if (handler == null) {\n                console.warn(\"Unknown action for message\", message);\n                return;\n            }\n            handler(message.payload);\n        }\n    }\n    #getRequestHandler(action) {\n        switch (action) {\n            case createSubscriptionRequestAction:\n                return this.#handleCreateSubscriptionRequest.bind(this);\n            case removeSubscriptionRequestAction:\n                return this.#handleRemoveSubscriptionRequest.bind(this);\n            default:\n                return this.requestResolver?.(action);\n        }\n    }\n    #handleRequest(request, event, source) {\n        const reply = (payload, error) => {\n            const response = {\n                id: request.id,\n                type: messageTypeResponse,\n                payload,\n                error,\n            };\n            const targetOrigin = this.#getTargetOrigin(event.origin);\n            if (this.debug) {\n                console.log(`Sending message to ${targetOrigin}:`, response);\n            }\n            source.postMessage(this.#processOutgoingMessage(response, undefined, request), targetOrigin);\n        };\n        const handler = this.#getRequestHandler(request.action);\n        if (handler == null) {\n            console.warn(\"Unknown action for request\", request);\n            reply(new Error(`Unknown action: ${request.action}`), true);\n            return;\n        }\n        Promise.resolve()\n            .then(() => handler(request.payload))\n            .then((response) => {\n            reply(response);\n        })\n            .catch((err) => {\n            console.error(`Failed during request action ${request.action}`, err);\n            reply(toErrorPayload(err), true);\n        });\n    }\n    #receive(id) {\n        let callback;\n        return new Promise((resolve, reject) => {\n            callback = (event) => {\n                if (event.source === this.source &&\n                    (this.sourceOrigin == null || event.origin === this.sourceOrigin) &&\n                    isResponse(event.data) &&\n                    event.data.id === id) {\n                    if (event.data.error) {\n                        reject(parseErrorPayload(event.data.payload));\n                    }\n                    else {\n                        resolve(event.data.payload);\n                    }\n                }\n            };\n            window.addEventListener(\"message\", callback);\n        }).finally(() => {\n            window.removeEventListener(\"message\", callback);\n        });\n    }\n    async sendRequest(action, payload, transfer) {\n        return this.#sendRequestInternal(action, payload, true, transfer);\n    }\n    async #sendRequestInternal(action, payload, waitForConnected, transfer) {\n        const id = crypto.randomUUID();\n        const responsePromise = this.#receive(id);\n        const message = {\n            id,\n            type: messageTypeRequest,\n            action,\n            payload,\n        };\n        const [response] = await Promise.all([\n            responsePromise,\n            this.#postMessage(message, transfer, waitForConnected),\n        ]);\n        return response;\n    }\n    async sendEvent(action, payload, transfer) {\n        await this.#sendEventInternal(action, payload, true, transfer);\n    }\n    async #sendEventInternal(action, payload, waitForConnected, transfer) {\n        const message = {\n            type: messageTypeEvent,\n            action,\n            payload,\n        };\n        await this.#postMessage(message, transfer, waitForConnected);\n    }\n    async #postMessage(message, transfer, waitForConnected) {\n        if (this.source == null) {\n            throw new Error(\"Missing source\");\n        }\n        const targetOrigin = this.#getTargetOrigin(this.sourceOrigin);\n        if (this.debug) {\n            console.log(`Sending message to ${targetOrigin}:`, message);\n        }\n        if (waitForConnected) {\n            await this.connectedPromise();\n        }\n        this.source.postMessage(this.#processOutgoingMessage(message, transfer), targetOrigin, transfer);\n    }\n    #getTargetOrigin(value) {\n        return value === \"null\" || value == null ? \"*\" : value;\n    }\n    async createSubscription(name, handler, options) {\n        const subscriptionId = crypto.randomUUID();\n        this.#subscriptionEventHandlers.set(subscriptionId, handler);\n        if (this.debug) {\n            console.log(`Creating subscription with ID ${subscriptionId} for ${name}`);\n        }\n        try {\n            const payload = {\n                subscriptionId,\n                name,\n            };\n            if (options) {\n                payload.options = options;\n            }\n            await this.#sendRequestInternal(createSubscriptionRequestAction, payload, true);\n        }\n        catch (e) {\n            throw new Error(\"Failed to create subscription\", { cause: e });\n        }\n        return {\n            unsubscribe: () => {\n                if (this.debug) {\n                    console.log(`Unsubscribing from subscription ${subscriptionId} for ${name}`);\n                }\n                this.#subscriptionEventHandlers.delete(subscriptionId);\n                this.#removeSubscription(subscriptionId);\n            },\n        };\n    }\n    #removeSubscription(subscriptionId) {\n        const payload = {\n            subscriptionId,\n        };\n        this.#sendRequestInternal(removeSubscriptionRequestAction, payload, true).catch((e) => {\n            console.warn(\"Failed to remove subscription\", e);\n        });\n    }\n    #unsubscribeAllHandlers() {\n        for (const unsubscribe of this.#unsubscribeHandlers.values()) {\n            try {\n                unsubscribe();\n            }\n            catch (e) {\n                console.warn(\"Failed to unsubscribe\", e);\n            }\n        }\n        this.#unsubscribeHandlers.clear();\n        this.#subscriptionEventHandlers.clear();\n    }\n    async #handleCreateSubscriptionRequest(payload) {\n        const subscribe = this.subscribeResolver?.(payload.name);\n        if (!subscribe) {\n            throw new Error(`Unknown subscription name: ${payload.name}`);\n        }\n        const sendEvent = (data) => {\n            const event = {\n                subscriptionId: payload.subscriptionId,\n                data,\n            };\n            this.#sendEventInternal(subscriptionEventAction, event, true).catch((err) => {\n                console.error(\"Sending event failed\", err);\n            });\n        };\n        const { unsubscribe } = await subscribe(sendEvent, payload.options);\n        this.#unsubscribeHandlers.set(payload.subscriptionId, unsubscribe);\n        return {\n            ack: true,\n        };\n    }\n    #handleRemoveSubscriptionRequest(payload) {\n        const unsubscribe = this.#unsubscribeHandlers.get(payload.subscriptionId);\n        // Ignore if the subscription does not exist. Assume it has already been removed.\n        if (unsubscribe) {\n            unsubscribe();\n            this.#unsubscribeHandlers.delete(payload.subscriptionId);\n        }\n        return {\n            ack: true,\n        };\n    }\n    #handleSubscriptionEvent(event) {\n        const subscriptionId = event.subscriptionId;\n        const handler = this.#subscriptionEventHandlers.get(subscriptionId);\n        if (handler == null) {\n            console.debug(`Unknown subscription ID: ${event.subscriptionId}`, event);\n            return;\n        }\n        handler(event.data);\n    }\n}\n", "// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { EmbeddedViewSdk } from \"./embedded-view.js\";\n/**\n * Create and upload elements to the integrate element system.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.integrateElements | integrateElements}.\n */\nexport class IntegrateApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Create a hierarchy of elements in the integrate element system.\n     *\n     * More information about the integrate element system can be seen\n     * at https://aps.autodesk.com/en/docs/forma/v1/http-specification/integrate-api/\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns ID, URN, and revision of the root element created.\n     *\n     * @example\n     * const upload = await Forma.integrateElements.uploadFile({\n     *   data: \"glb data here...\",\n     * })\n     *\n     * const { urn } = await Forma.integrateElements.createElementHierarchy({\n     *   data: {\n     *     rootElement: \"root\",\n     *     elements: {\n     *       root: {\n     *         id: \"root\",\n     *         properties: {\n     *           geometry: {\n     *             type: \"File\",\n     *             format: \"glb\",\n     *             s3Id: upload.fileId,\n     *           },\n     *         },\n     *       },\n     *     },\n     *   },\n     * })\n     *\n     * console.log(`Created element: ${urn}`)\n     */\n    async createElementHierarchy(request) {\n        return await this.#iframeMessenger.sendRequest(\"integrate/create-element-hierarchy\", request);\n    }\n    /**\n     * Upload a file to the integrate file storage. Files stored here are can only\n     * be retrieved in relation to an element. An example of this is uploading a\n     * geometric file - e.g. GLB or GeoJSON files.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns Unique identifier for the uploaded file.\n     */\n    async uploadFile(request) {\n        return await this.#iframeMessenger.sendRequest(\"integrate/upload-file\", request);\n    }\n}\n", "// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { EmbeddedViewSdk } from \"./embedded-view.js\";\n/**\n * Manage items in the user's\n * [Library](https://help.autodeskforma.com/en/articles/6976465-library-and-importing-files)\n * of available data.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.library | library}.\n */\nexport class LibraryApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Add data to Library as a new item.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns The newly created item.\n     *\n     * @example\n     * const urn = mockRegisterElementInSystem() // See e.g. integrate-elements module\n     * const item = await Forma.library.createItem({\n     *  data: { name: \"My new item\", status: \"success\", urn: urn }\n     * })\n     */\n    async createItem(request) {\n        return await this.#iframeMessenger.sendRequest(\"library/create-item\", request);\n    }\n    /**\n     * Update an existing library item.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns The updated item.\n     */\n    async updateItem(request) {\n        return await this.#iframeMessenger.sendRequest(\"library/update-item\", request);\n    }\n    /**\n     * Delete an existing library item.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     */\n    async deleteItem(request) {\n        await this.#iframeMessenger.sendRequest(\"library/delete-item\", request);\n    }\n}\n", "/**\n * Interact with Forma's native predictive models for [rapid analysis](https://help.autodeskforma.com/en/articles/6977396-rapid-wind-analysis).\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.prediction | prediction}.\n */\nexport class PredictiveAnalysisApi {\n    #iframeMessenger;\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * This function return the wind parameters used by Forma to predict wind conditions.\n     * It includes a wind rose with 8 directions and a surface roughness.\n     */\n    async getWindParameters() {\n        return await this.#iframeMessenger.sendRequest(\"prediction/get-wind-parameters\");\n    }\n    /**\n     * Predict wind conditions usings Forma's rapid wind model.\n     * Read more about rapid wind at [Forma Help](https://help.autodeskforma.com/en/articles/6977396-rapid-wind-analysis).\n     *\n     * @returns 2d grid of wind conditions. For wind comfort values are 0-4 where lower is better conditions.\n     *\n     * @example\n     * const windRose = await Forma.prediction.getWindParameters()\n     * // See HeightMaps for more infor on how to create heightMaps\n     * const heightMaps = computeHeightMaps(terrainGeometry, terrainAndBuildingsGeometry)\n     * const prediction = await Forma.prediction.predictWind({\n     *  heightMaps,\n     *  windRose,\n     *  type: \"comfort\",\n     *  roughness: windRose.roughness,\n     *  comfortScale: \"lawson_lddc\",\n     * })\n     * // calculate statistics, mix with other grids, etc.\n     */\n    async predictWind(request) {\n        return await this.#iframeMessenger.sendRequest(\"prediction/predict-wind\", request);\n    }\n}\n", "/**\n * Access project-level metadata. See the\n * [Forma documentation](https://help.autodeskforma.com/en/articles/7003747-how-to-create-a-new-project)\n * for more information.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.project | project}.\n */\nexport class ProjectApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Fetch all project metadata.\n     *\n     * @returns The project metadata.\n     *\n     * @example\n     * const projectMetadata = await Forma.project.get()\n     */\n    async get() {\n        return await this.#iframeMessenger.sendRequest(\"project/get\");\n    }\n    /**\n     * Fetch project country code.\n     *\n     * @hidden\n     * @deprecated Use countryCode from {@link get} instead.\n     *\n     * @returns Country code for the project.\n     *\n     * @example\n     * const countryCode = await Forma.project.getCountryCode()\n     */\n    async getCountryCode() {\n        return await this.#iframeMessenger.sendRequest(\"project/get-country-code\");\n    }\n    /**\n     * Fetch project location (latitude and longitude).\n     *\n     * @returns Geolocation for the project as [latitude, longitude].\n     *\n     * @example\n     * const [latitude, longitude] = await Forma.project.getGeoLocation()\n     */\n    async getGeoLocation() {\n        return await this.#iframeMessenger.sendRequest(\"project/get-geo-location\");\n    }\n    /**\n     * Fetch project timezone.\n     *\n     * @hidden\n     * @deprecated Use timezone from {@link get} instead.\n     *\n     * @returns Timezone for the project.\n     *\n     * @example\n     * const timezone = await Forma.project.getTimezone()\n     */\n    async getTimezone() {\n        return await this.#iframeMessenger.sendRequest(\"project/get-timezone\");\n    }\n}\n", "// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { EmbeddedViewSdk } from \"./embedded-view.js\";\n/**\n * Access proposal metadata and add new elements to it.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.proposal | proposal}.\n */\nexport class ProposalApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Fetch the top level URN for the proposal.\n     *\n     * @returns Root URN\n     *\n     * @example\n     * const rootUrn = await Forma.proposal.getRootUrn()\n     */\n    async getRootUrn() {\n        return await this.#iframeMessenger.sendRequest(\"proposal/get-root-urn\");\n    }\n    /**\n     * Fetch the unique identifier of the proposal.\n     *\n     * @returns Proposal ID\n     *\n     * @example\n     * const proposalId = await Forma.proposal.getId()\n     */\n    async getId() {\n        return await this.#iframeMessenger.sendRequest(\"proposal/get-id\");\n    }\n    /**\n     * Add a new element to the proposal element tree.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @returns { path: string } object with the path of the new element\n     *\n     * @example\n     * const urn = mockRegisterElementInSystem() // See e.g. integrate-elements module\n     * const { path } = await Forma.proposal.addElement({ urn })\n     */\n    async addElement(request) {\n        return await this.#iframeMessenger.sendRequest(\"proposal/add-element\", request);\n    }\n    /**\n     * Replace an element in the proposal.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @example\n     * const urn = mockRegisterElementInSystem() // See e.g. integrate-elements module\n     * const { path } = await Forma.proposal.addElement({ urn })\n     * const newUrn = mockRegisterElementInSystem() // See e.g. integrate-elements module\n     * await Forma.proposal.replaceElement({ path, newUrn })\n     */\n    async replaceElement(request) {\n        await this.#iframeMessenger.sendRequest(\"proposal/replace-element\", request);\n    }\n    /**\n     * Replace existing terrain on the proposal.\n     *\n     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.\n     *\n     * @example\n     * const glb = createGlbSomehow()\n     * await Forma.proposal.replaceTerrain(glb)\n     */\n    async replaceTerrain(request) {\n        await this.#iframeMessenger.sendRequest(\"proposal/terrain/replace\", request);\n    }\n    /**\n     * Subscribe to changes in the proposal.\n     *\n     * @example\n     * const { unsubscribe } = await Forma.proposal.subscribe(({ rootUrn }) => {\n     *  console.log(\"updated urn is\", rootUrn)\n     * });\n     *\n     * @param callback event handler for each proposal change\n     * @returns { unsubscribe: () => void } object with an `unsubscribe` method to stop listening\n     */\n    async subscribe(callback) {\n        return await this.#iframeMessenger.createSubscription(\"proposal/on-change\", callback);\n    }\n}\n", "/**\n * A pub/sub implementation that queues events until a subscriber is added.\n * There is no event name/type, so all events are of the same type.\n *\n * The first subscriber will receive any previously queued events.\n */\nexport class QueuedPubSub {\n    #eventTarget = new EventTarget();\n    #queued = [];\n    #subscribers = new Set();\n    subscribe(handler) {\n        const internalHandler = (_event) => {\n            const event = _event;\n            handler(event.detail);\n        };\n        const subscriber = Symbol();\n        this.#subscribers.add(subscriber);\n        this.#eventTarget.addEventListener(\"event\", internalHandler);\n        if (this.#queued.length > 0) {\n            const queued = this.#queued;\n            this.#queued = [];\n            for (const data of queued) {\n                this.#dispatch(data);\n            }\n        }\n        return () => {\n            this.#subscribers.delete(subscriber);\n            this.#eventTarget.removeEventListener(\"event\", internalHandler);\n        };\n    }\n    publish(data) {\n        if (this.#subscribers.size === 0) {\n            this.#queued.push(data);\n        }\n        else {\n            this.#dispatch(data);\n        }\n    }\n    #dispatch(data) {\n        this.#eventTarget.dispatchEvent(new CustomEvent(\"event\", {\n            detail: data,\n        }));\n    }\n}\n", "function loadImage(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n            resolve(img);\n        };\n        img.onerror = () => {\n            reject(new Error(\"Failed to load image\"));\n        };\n        img.src = url;\n    });\n}\nasync function canvasFromDataUrl(url, width, height) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        throw new Error(\"Failed to get 2d context from canvas\");\n    }\n    const imageElement = await loadImage(url);\n    ctx.drawImage(imageElement, 0, 0);\n    return canvas;\n}\n/**\n * Interact with the camera in the 3D scene of designmode.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.camera | camera}.\n */\nexport class CameraApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Move camera view to a new position.\n     *\n     * @example\n     * // Move camera to view down on the center of the proposal from directly\n     * // above, spending 1 second on the transition.\n     * await Forma.camera.move({\n     *   position: { x: 0, y: 0, z: 100 },\n     *   target: { x: 0, y: 0, z: 0 },\n     *   transitionTimeMs: 1000,\n     * })\n     */\n    async move(request) {\n        await this.#iframeMessenger.sendRequest(\"scene/camera/move\", request);\n    }\n    /**\n     * Toggle between perspective and orthographic camera.\n     *\n     * @example\n     * await Forma.camera.switchPerspective()\n     */\n    async switchPerspective() {\n        await this.#iframeMessenger.sendRequest(\"scene/camera/switch-perspective\");\n    }\n    /**\n     * Capture a screenshot of the current camera view as a canvas.\n     *\n     * @returns Canvas with the captured screenshot.\n     *\n     * @example\n     * // Capture a 100x100 pixel screenshot of the current camera view.\n     * const canvas = await Forma.camera.capture({ width: 100, height: 100 })\n     */\n    async capture(request) {\n        return await canvasFromDataUrl(await this.#iframeMessenger.sendRequest(\"scene/camera/capture\", request), request.width, request.height);\n    }\n    /**\n     * Fetch the current camera state in the designmode scene.\n     *\n     * @returns Current camera state.\n     *\n     * @example\n     * const currentCameraState = await Forma.camera.getCurrent()\n     */\n    async getCurrent() {\n        return await this.#iframeMessenger.sendRequest(\"scene/camera/get-current\");\n    }\n}\n", "/**\n * Enable design tools supplied by the host app.\n *\n * @remarks\n * Available via {@link index.EmbeddedViewSdk.designTool | EmbeddedViewSdk.designTool}.\n */\nexport class DesignToolApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Activate tool for creating a point by clicking in the 3D scene.\n     *\n     * Does not return until the user has selected a point or cancelled the operation (by clicking ESC).\n     *\n     * @returns The selected point, or `undefined` if the user cancelled the operation.\n     *\n     * @example\n     * const point = await Forma.designTool.getPoint();\n     */\n    async getPoint() {\n        return await this.#iframeMessenger.sendRequest(\"design-tool/get-point\");\n    }\n    /**\n     * Activate tools for creating a polygon.\n     *\n     * There are several available tools for creating polygons:\n     * 1. \"free-form\": Click repeatedly in the 3D scene to create a polygon with any number of vertices.\n     * 2. \"rectangle\": Click two points to define the first side of a rectangle, and then a third point along a 90 degree angle to define the second side.\n     * 3. \"circle\": Click a centre and then a point on the circumference to create a circle.\n     * 4. \"pick\": Select an existing shape in the 3D scene and use it as the basis for a new polygon.\n     *\n     * Does not return until the user has created a polygon or cancelled the operation (by clicking ESC).\n     *\n     * @returns The created polygon, or `undefined` if the user cancelled the operation.\n     *\n     * @example\n     * const polygon = await Forma.designTool.getPolygon();\n     */\n    async getPolygon() {\n        return await this.#iframeMessenger.sendRequest(\"design-tool/get-polygon\");\n    }\n    /**\n     * Activate tool for creating an extruded polygon.\n     *\n     * See {@link getPolygon} for available tools for creating polygons.\n     * Once a polygon has been created, choose the height of the extrusion by clicking a final time.\n     *\n     * Does not return until the user has created an extruded polygon or cancelled the operation (by clicking ESC).\n     *\n     * @returns The created extruded polygon, or `undefined` if the user cancelled the operation.\n     *\n     * @example\n     * const extrudedPolygon = await Forma.designTool.getExtrudedPolygon();\n     */\n    async getExtrudedPolygon() {\n        return await this.#iframeMessenger.sendRequest(\"design-tool/get-extruded-polygon\");\n    }\n    /**\n     * Activate tool for creating a line.\n     *\n     * Click repeatedly in the 3D scene to create a line with any number of vertices.\n     *\n     * Does not return until the user has created a line or cancelled the operation (by clicking ESC).\n     *\n     * @returns The created Line, or `undefined` if the user cancelled the operation.\n     *\n     * @example\n     * const line = await Forma.designTool.getLine();\n     */\n    async getLine() {\n        return await this.#iframeMessenger.sendRequest(\"design-tool/get-line\");\n    }\n    /**\n     * Subscribe to the 'start' event for edits with the drawing tools.\n     *\n     * @example\n     * const { unsubscribe } = await Forma.designTool.onEditStart(() => {\n     *  console.log('start event')\n     * });\n     *\n     * @param callback event handler to be called when editing starts\n     * @returns { unsubscribe: () => void } object with an `unsubscribe` method to stop listening\n     */\n    async onEditStart(callback) {\n        return this.#iframeMessenger.createSubscription(\"scene/design-events/on-edit-start\", callback);\n    }\n    /**\n     * Subscribe to the 'end' event for edits with the drawing tools.\n     *\n     * @example\n     * const { unsubscribe } = await Forma.designTool.onEditEnd(() => {\n     *  console.log('end event')\n     * });\n     *\n     * @param callback event handler to be called when editing ends\n     * @returns { unsubscribe: () => void } object with an `unsubscribe` method to stop listening\n     */\n    async onEditEnd(callback) {\n        return this.#iframeMessenger.createSubscription(\"scene/design-events/on-edit-end\", callback);\n    }\n}\n", "/**\n * Render GLBs in the 3D scene.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.render | render}.{@link render.RenderApi.glb | glb}.\n */\nexport class RenderGlbApi {\n    #iframeMessenger;\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Add a GLB to the scene.\n     *\n     * @returns Unique identifier of the GLB object in the scene.\n     *\n     * @example\n     * const {id} = await Forma.render.glb.add({ glb }),\n     */\n    async add(request) {\n        return await this.#iframeMessenger.sendRequest(\"scene/render/glb/add\", request);\n    }\n    /**\n     * Upsert an mesh in the scene. If the mesh does not exist, it will be added.\n     *\n     * This method can also be used as an upsert.\n     *\n     * @example\n     * await Forma.render.glb.update({ id: \"myPreviouslyAddedGlbId\", glb })\n     */\n    async update(request) {\n        await this.#iframeMessenger.sendRequest(\"scene/render/glb/update\", request);\n    }\n    /**\n     * Remove an existing GLB from the scene.\n     *\n     * @example\n     * await Forma.render.glb.remove({ id: \"myPreviouslyAddedGlbId\" })\n     */\n    async remove(request) {\n        await this.#iframeMessenger.sendRequest(\"scene/render/glb/remove\", request);\n    }\n    /**\n     * Remove all GLBs added by this API from the scene.\n     *\n     * Called automatically when the extension is unloaded\n     *\n     * @example\n     * await Forma.render.glb.cleanup()\n     */\n    async cleanup() {\n        await this.#iframeMessenger.sendRequest(\"scene/render/glb/cleanup\");\n    }\n}\n", "import { RenderGlbApi } from \"./renderGlb.js\";\n/**\n * Render objects in the 3D scene.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.render | render}.\n */\nexport class RenderApi {\n    #iframeMessenger;\n    glb;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n        this.glb = new RenderGlbApi(iframeMessenger);\n    }\n    /**\n     * Add a mesh to the scene.\n     *\n     * @returns Unique identifier of the mesh object in the scene.\n     *\n     * @example\n     * const {id} = await Forma.render.addMesh({ geometryData }),\n     */\n    async addMesh(request) {\n        return await this.#iframeMessenger.sendRequest(\"scene/render/add-mesh\", request);\n    }\n    /**\n     * Upsert an mesh in the scene. If the mesh does not exist, it will be added.\n     *\n     * @example\n     * await Forma.render.updateMesh({ id: \"myPreviouslyAddedGlbId\", geometryData })\n     */\n    async updateMesh(request) {\n        await this.#iframeMessenger.sendRequest(\"scene/render/update-mesh\", request);\n    }\n    /**\n     * Remove an existing mesh from the scene.\n     *\n     * @example\n     * await Forma.render.remove({ id: \"myPreviouslyAddedMeshId\" })\n     */\n    async remove(request) {\n        await this.#iframeMessenger.sendRequest(\"scene/render/remove\", request);\n    }\n    /**\n     * Remove all meshes added by this API from the scene.\n     *\n     * Called automatically when the extension is unloaded.\n     *\n     * @example\n     * await Forma.render.cleanup()\n     */\n    async cleanup() {\n        await this.#iframeMessenger.sendRequest(\"scene/render/cleanup\");\n    }\n}\n", "/**\n * Interact with the sun object in the 3D scene.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.sun | sun}.\n */\nexport class SunApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Fetch the `Date` corresponding to the current position of the sun in the scene.\n     *\n     * @remarks\n     * Since `Date` objects in JavaScript are based on the instance where the script is run,\n     * it is important to capture the discrepancy between the machine local time and the time\n     * at the project location. We recommend using a library such as\n     * [Luxon](https://moment.github.io/luxon/) to handle this\n     * -- their website has a lot of good documentation on the intricacies of time zones.\n     *\n     * @returns Date for the current sun position.\n     *\n     * @example\n     * import { DateTime } from \"luxon\";\n  \n     * const projectTimezone = await Forma.project.getTimezone();\n     * const projectDate = await Forma.sun.getDate()\n     * const currentDate = DateTime.fromJSDate(currentDate, { zone: projectTimezone });\n     */\n    async getDate() {\n        return await this.#iframeMessenger.sendRequest(\"scene/sun/get-date\");\n    }\n    /**\n     * Set the position of the sun in the scene.\n     *\n     * @remarks\n     * Since `Date` objects in JavaScript are based on the instance where the script is run,\n     * it is important to capture the discrepancy between the machine local time and the time\n     * at the project location. We recommend using a library such as\n     * [Luxon](https://moment.github.io/luxon/) to handle this\n     * -- their website has a lot of good documentation on the intricacies of time zones.\n     *\n     * @example\n     * import { DateTime } from \"luxon\";\n     *\n     * const projectTimezone = await Forma.project.getTimezone();\n     * const wantedDate = DateTime.fromISO(\"2023-07-01T13:37:00\", { zone: projectTimezone });\n     * await Forma.sun.setDate({ date: wantedDate.toJSDate() });\n     */\n    async setDate(request) {\n        await this.#iframeMessenger.sendRequest(\"scene/sun/set-date\", request);\n    }\n}\n", "/**\n * Interact with the terrain in the 3D scene.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.terrain | terrain}.\n */\nexport class TerrainApi {\n    #iframeMessenger;\n    groundTexture;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n        this.groundTexture = new GroundTextureApi(iframeMessenger);\n    }\n    /**\n     * Fetch the bounding box for the terrain.\n     *\n     * @returns Axis-aligned bounding box for the terrain.\n     * More specifically, the minimum and maximum (x,y,z) values, in the local coordinate system.\n     */\n    async getBbox() {\n        return await this.#iframeMessenger.sendRequest(\"scene/terrain/bbox/get\");\n    }\n    /**\n     * Retrieves the elevation of the terrain (in meters above sea level) at a specific point within the scene.\n     *\n     * If the coordinates are outside the terrain mesh, it returns the minimum elevation in the terrain.\n     */\n    async getElevationAt(request) {\n        return await this.#iframeMessenger.sendRequest(\"scene/terrain/get-elevation-at\", request);\n    }\n}\n/**\n * Manage ground textures applied to the terrain object in the 3D scene.\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.terrain | terrain}.{@link terrain.TerrainApi.groundTexture | groundTexture}.\n */\nexport class GroundTextureApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Add a ground texture to the terrain.\n     *\n     * @example\n     * // Create canvas\n     * const canvas = document.createElement(\"canvas\");\n     * canvas.width = 100;\n     * canvas.height = 100;\n     *\n     * // Fill canvas with blue color\n     * const ctx = canvas.getContext(\"2d\");\n     * if (ctx) {\n     *    ctx.fillStyle = \"blue\";\n     *    ctx.fillRect(0, 0, 100, 100);\n     *\n     *    // Add canvas as ground texture to position (0, 0) in the local coordinate system.\n     *    // The texture will cover a 100x100 meter square area on the terrain,\n     *    // with lower left corner in (x: -50, y: -50) and upper right corner in (x: 50, y: 50).\n     *    await Forma.terrain.groundTexture.add({\n     *        name: \"myGroundTexture\",\n     *        canvas,\n     *        position: { x: 0, y: 0, z: 1 },\n     *        scale: { x: 1, y: 1 },\n     *      });\n     * }\n     */\n    async add(request) {\n        const canvasUrl = request.canvas.toDataURL();\n        await this.#iframeMessenger.sendRequest(\"scene/terrain/ground-texture/add\", {\n            name: request.name,\n            canvasUrl,\n            position: request.position,\n            scale: request.scale,\n        });\n    }\n    /**\n     * Update the texture data for an existing ground texture object.\n     *\n     * @example\n     * // Create a new canvas filled with red and update the ground texture with this new texture\n     * const newCanvas = document.createElement(\"newCanvas\");\n     * newCanvas.width = 100;\n     * newCanvas.height = 100;\n     * const ctx = newCanvas.getContext(\"2d\");\n     * if (ctx) {\n     *    ctx.fillStyle = \"red\";\n     *    ctx.fillRect(0, 0, 100, 100);\n     *    await Forma.terrain.groundTexture.updateTextureData({\n     *        name: \"myGroundTexture\",\n     *        canvas: newCanvas,\n     *    });\n     * }\n     */\n    async updateTextureData(request) {\n        const canvasUrl = request.canvas.toDataURL();\n        await this.#iframeMessenger.sendRequest(\"scene/terrain/ground-texture/update-texture-data\", { name: request.name, canvasUrl });\n    }\n    /**\n     * Update the placement of an existing ground texture object.\n     *\n     * @example\n     * // Move \"myGroundTexture\" to (100, 100) in the local coordinate system.\n     * await Forma.terrain.groundTexture.updatePosition({\n     *   name: \"myGroundTexture\",\n     *   position: { x: 100, y: 100, z: 1 }\n     * })\n     */\n    async updatePosition(request) {\n        await this.#iframeMessenger.sendRequest(\"scene/terrain/ground-texture/update-position\", request);\n    }\n    /**\n     * Remove an existing ground texture object.\n     *\n     * @example\n     * // Remove \"myGroundTexture\".\n     * await Forma.terrain.groundTexture.remove({ name: \"myGroundTexture\" })\n     */\n    async remove(request) {\n        await this.#iframeMessenger.sendRequest(\"scene/terrain/ground-texture/remove\", request);\n    }\n}\n", "/**\n * Interact with user's selection (i.e. shift-clicked elements in the scene)\n *\n * @remarks\n * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.selection | selection}.\n */\nexport class SelectionApi {\n    #iframeMessenger;\n    /** @hidden */\n    constructor(iframeMessenger) {\n        this.#iframeMessenger = iframeMessenger;\n    }\n    /**\n     * Get selected elements.\n     *\n     * @returns List of paths to elements currently selected in the scene.\n     *\n     * @example\n     * // Fetch all paths to selected elements in the current proposal.\n     * // Count how many of them are buildings.\n     * const selectedPaths = await Forma.selection.getSelection()\n     * const buildingPaths = await Forma.geometry.getPathsByCategory({ category: \"buildings\" })\n     * const selectedBuildingPaths = selectedPaths.filter(path => buildingPaths.includes(path))\n     * const numberOfSelectedBuildings = selectedBuildingPaths.length\n     */\n    async getSelection() {\n        return await this.#iframeMessenger.sendRequest(\"scene/selection/get\");\n    }\n    /**\n     * Subscribe to selection changes.\n     *\n     * @example\n     * const { unsubscribe } = await Forma.selection.subscribe(({ paths }) => {\n     *  console.log(paths)\n     * });\n     *\n     * @param callback event handler for each selection change\n     * @returns { unsubscribe: () => void } object with an `unsubscribe` method to stop listening\n     */\n    async subscribe(callback) {\n        return await this.#iframeMessenger.createSubscription(\"scene/selection/on-change\", callback);\n    }\n}\n", "export const version = \"0.44.0\";\n", "import { AnalysisApi } from \"./analysis.js\";\nimport { AreaMetricsApi } from \"./areaMetrics.js\";\nimport { ElementsApi } from \"./elements.js\";\nimport { ExtensionsApi } from \"./extensions.js\";\nimport { GeneratorsApi } from \"./generators.js\";\nimport { GeometryApi } from \"./geometry.js\";\nimport { IframeMessenger, } from \"./iframe-messenger.js\";\nimport { IntegrateApi } from \"./integrate.js\";\nimport { LibraryApi } from \"./library.js\";\nimport { PredictiveAnalysisApi } from \"./predictive-analysis.js\";\nimport { ProjectApi } from \"./project.js\";\nimport { ProposalApi } from \"./proposal.js\";\nimport { QueuedPubSub } from \"./queued-pub-sub.js\";\nimport { CameraApi } from \"./scene/camera.js\";\nimport { DesignToolApi } from \"./scene/design-tool.js\";\nimport { RenderApi } from \"./scene/render.js\";\nimport { SunApi } from \"./scene/sun.js\";\nimport { TerrainApi } from \"./scene/terrain.js\";\nimport { SelectionApi } from \"./selection.js\";\nimport { version } from \"./version.js\";\nconst defaultAllowedOrigins = [\n    // EU Prod\n    \"https://app.autodeskforma.com\",\n    /^https:\\/\\/local\\.autodeskforma\\.com:/,\n    // US Prod\n    \"https://app.autodeskforma.eu\",\n    /^https:\\/\\/local\\.autodeskforma\\.eu:/,\n    // EU Chaos\n    \"https://app.spacemakerai.eu\",\n    /^https:\\/\\/local\\.spacemakerai\\.eu:/,\n];\nexport class EmbeddedViewSdk {\n    config;\n    source = window.parent;\n    #iframeMessenger;\n    origin;\n    analysis;\n    extensions;\n    elements;\n    generators;\n    geometry;\n    integrateElements;\n    library;\n    project;\n    proposal;\n    camera;\n    sun;\n    terrain;\n    render;\n    selection;\n    areaMetrics;\n    predictiveAnalysis;\n    designTool;\n    #customRequestHandlers = new Map();\n    #customEventHandlers = new Map();\n    #customSubscribeHandlers = new Map();\n    #iframeResizer = new ResizeObserver((entries) => {\n        const htmlEntry = entries.find((entry) => entry.target === document.documentElement);\n        if (htmlEntry) {\n            this.#iframeMessenger\n                .sendRequest(\"resizeIframeHeight\", {\n                height: htmlEntry.contentRect.height,\n            })\n                .catch((err) => {\n                console.log(\"failed to resize iframe\", err);\n            });\n        }\n    });\n    #messagePorts = new QueuedPubSub();\n    constructor(config) {\n        this.config = config;\n        this.origin = config?.origin ?? EmbeddedViewSdk.getHostOrigin();\n        const allowedOrigins = config?.allowedOrigins ?? defaultAllowedOrigins;\n        if (!allowedOrigins.some((allowedOrigin) => typeof allowedOrigin === \"string\"\n            ? allowedOrigin === this.origin\n            : allowedOrigin.test(this.origin))) {\n            throw new Error(`Unsupported origin: ${this.origin}`);\n        }\n        this.#iframeMessenger = new IframeMessenger({\n            sourceOrigin: this.origin,\n            source: this.source,\n            requestResolver: (action) => this.#customRequestHandlers.get(action),\n            eventResolver: (action) => this.#customEventHandlers.get(action),\n            subscribeResolver: (name) => this.#customSubscribeHandlers.get(name),\n            debug: config?.debug,\n        });\n        this.#iframeMessenger.connect();\n        void this.#iframeMessenger.sendEvent(\"sdk-version\", {\n            version,\n        });\n        window.addEventListener(\"beforeunload\", () => {\n            // Let the host know that we are unloading.\n            this.#iframeMessenger.disconnect();\n        });\n        window.addEventListener(\"focus\", () => {\n            // Let the host know that we are focused.\n            void this.#iframeMessenger.sendEvent(\"window-focused\");\n        });\n        this.analysis = new AnalysisApi(this.#iframeMessenger);\n        this.extensions = new ExtensionsApi(this.#iframeMessenger);\n        this.elements = new ElementsApi(this.#iframeMessenger);\n        this.generators = new GeneratorsApi(this.#iframeMessenger);\n        this.geometry = new GeometryApi(this.#iframeMessenger);\n        this.integrateElements = new IntegrateApi(this.#iframeMessenger);\n        this.library = new LibraryApi(this.#iframeMessenger);\n        this.project = new ProjectApi(this.#iframeMessenger);\n        this.proposal = new ProposalApi(this.#iframeMessenger);\n        this.camera = new CameraApi(this.#iframeMessenger);\n        this.sun = new SunApi(this.#iframeMessenger);\n        this.terrain = new TerrainApi(this.#iframeMessenger);\n        this.render = new RenderApi(this.#iframeMessenger);\n        this.selection = new SelectionApi(this.#iframeMessenger);\n        this.areaMetrics = new AreaMetricsApi(this.#iframeMessenger);\n        this.predictiveAnalysis = new PredictiveAnalysisApi(this.#iframeMessenger);\n        this.designTool = new DesignToolApi(this.#iframeMessenger);\n        this.#iframeResizer.observe(document.documentElement);\n        this.#customRequestHandlers.set(\"receive-message-port\", (payload) => {\n            this.#messagePorts.publish(payload);\n        });\n    }\n    async ping() {\n        return await this.#iframeMessenger.sendRequest(\"ping\");\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    getIframeMessenger() {\n        return this.#iframeMessenger;\n    }\n    getProjectId() {\n        const projectId = new URLSearchParams(window.location.search).get(\"projectId\");\n        if (!projectId) {\n            throw new Error(\"Missing query parameter: projectId\");\n        }\n        return projectId;\n    }\n    getExtensionId() {\n        const extensionId = new URLSearchParams(window.location.search).get(\"extensionId\");\n        if (!extensionId) {\n            throw new Error(\"Missing query parameter: extensionId\");\n        }\n        return extensionId;\n    }\n    /**\n     * Check for access to perform edit operations in the current project.\n     *\n     * @example\n     * ```js\n     * const canEdit = await Forma.getCanEdit()\n     * if (canEdit) {\n     *  await Forma.proposal.addElement({ urn })\n     * } else {\n     *   console.log(\"User need to have collaborator or admin role to add elements\")\n     * }\n     * ```\n     */\n    async getCanEdit() {\n        return await this.#iframeMessenger.sendRequest(\"access/can-edit\");\n    }\n    /**\n     * Retrieve the embedded view ID used to identify this embedded view.\n     *\n     * You can set a custom embedded view ID when dynamically opening\n     * an embedded view inside a floating panel.\n     */\n    getEmbeddedViewId() {\n        const embeddedViewId = new URLSearchParams(window.location.search).get(\"embeddedViewId\");\n        if (!embeddedViewId) {\n            throw new Error(\"Missing query parameter: embeddedViewId\");\n        }\n        return embeddedViewId;\n    }\n    static getHostOrigin() {\n        const origin = new URLSearchParams(window.location.search).get(\"origin\");\n        if (!origin) {\n            throw new Error(\"Missing query parameter: origin\");\n        }\n        return origin;\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    setRequestHandler(name, handler) {\n        this.#customRequestHandlers.set(name, handler);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    setEventHandler(name, handler) {\n        this.#customEventHandlers.set(name, handler);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    setSubscribeHandler(name, handler) {\n        this.#customSubscribeHandlers.set(name, handler);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    sendRequest(action, payload, transfer) {\n        return this.#iframeMessenger.sendRequest(action, payload, transfer);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    sendEvent(action, payload, transfer) {\n        return this.#iframeMessenger.sendEvent(action, payload, transfer);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    createSubscription(name, handler, options) {\n        return this.#iframeMessenger.createSubscription(name, handler, options);\n    }\n    /**\n     * Open another embedded view in a floating panel.\n     *\n     * The embedded view will be owned by the current embedded view,\n     * and automatically closed when the current embedded view is closed.\n     *\n     * To wait for the embedded view to be ready or being closed, listen to\n     * the relevant events via {@link onEmbeddedViewStateChange}\n     * before invoking this method. Methods such as {@link createMessagePort}\n     * will automatically wait for the embedded view to be ready.\n     *\n     * If the URL is invalid or the embedded view cannot be initialized,\n     * the state of the embedded view will remain open and not connected,\n     * until the user closes the panel which triggers the closed state.\n     *\n     * @experimental\n     */\n    async openFloatingPanel(options) {\n        await this.#iframeMessenger.sendRequest(\"open-floating-panel\", options);\n    }\n    /**\n     * Close an embedded view belonging to this extension.\n     *\n     * Currently only floating panels can be closed.\n     *\n     * If the embedded view is not open this will still resolve successfully.\n     *\n     * @experimental\n     */\n    async closeEmbeddedView(options) {\n        await this.#iframeMessenger.sendRequest(\"close-embedded-view\", options);\n    }\n    /**\n     * Listen to when the state of an embedded view belonging to the current\n     * extension changes.\n     *\n     * @experimental\n     */\n    async onEmbeddedViewStateChange(handler) {\n        return this.#iframeMessenger.createSubscription(\"on-embedded-view-state-change\", handler);\n    }\n    /**\n     * Create a MessagePort that can be used to communicate directly with\n     * another embedded view belonging to the current extension.\n     *\n     * The other embedded view must have called the {@link onMessagePort} method\n     * during initialization for this to succeeed.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API\n     * @experimental\n     */\n    async createMessagePort(options) {\n        const channel = new MessageChannel();\n        await this.#iframeMessenger.sendRequest(\"create-message-port\", {\n            embeddedViewId: options.embeddedViewId,\n            portName: options.portName,\n            port: channel.port2,\n        }, [channel.port2]);\n        return channel.port1;\n    }\n    /**\n     * Receive a MessagePort initiated from {@link createMessagePort}.\n     *\n     * The first time this is called, the handler will receive any\n     * queued message ports.\n     *\n     * @returns A function that can be used to unsubscribe.\n     *\n     * @experimental\n     */\n    onMessagePort(handler) {\n        return this.#messagePorts.subscribe(handler);\n    }\n}\n", "/**\n * The `auto` entrypoint automatically creates an instance of\n * {@link index.EmbeddedViewSdk | EmbeddedViewSdk} that can be accessed\n * using the {@link Forma} export.\n *\n * This is a convenience entrypoint that can be used unless you need to\n * use custom options for the {@link index.EmbeddedViewSdk | EmbeddedViewSdk},\n * in which case you need to instantiate it manually.\n *\n * @packageDocumentation\n */\nimport { EmbeddedViewSdk } from \"./internal/embedded-view.js\";\n/**\n * {@inheritDoc auto}\n */\nexport const Forma = new EmbeddedViewSdk();\n"],
  "mappings": "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",
  "names": ["_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "State", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger", "_iframeMessenger"]
}
