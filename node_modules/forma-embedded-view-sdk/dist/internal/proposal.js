// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { EmbeddedViewSdk } from "./embedded-view.js";
/**
 * Access proposal metadata and add new elements to it.
 *
 * @remarks
 * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.proposal | proposal}.
 */
export class ProposalApi {
    #iframeMessenger;
    /** @hidden */
    constructor(iframeMessenger) {
        this.#iframeMessenger = iframeMessenger;
    }
    /**
     * Fetch the top level URN for the proposal.
     *
     * @returns Root URN
     *
     * @example
     * const rootUrn = await Forma.proposal.getRootUrn()
     */
    async getRootUrn() {
        return await this.#iframeMessenger.sendRequest("proposal/get-root-urn");
    }
    /**
     * Fetch the unique identifier of the proposal.
     *
     * @returns Proposal ID
     *
     * @example
     * const proposalId = await Forma.proposal.getId()
     */
    async getId() {
        return await this.#iframeMessenger.sendRequest("proposal/get-id");
    }
    /**
     * Add a new element to the proposal element tree.
     *
     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.
     *
     * @returns { path: string } object with the path of the new element
     *
     * @example
     * const urn = mockRegisterElementInSystem() // See e.g. integrate-elements module
     * const { path } = await Forma.proposal.addElement({ urn })
     */
    async addElement(request) {
        return await this.#iframeMessenger.sendRequest("proposal/add-element", request);
    }
    /**
     * Replace an element in the proposal.
     *
     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.
     *
     * @example
     * const urn = mockRegisterElementInSystem() // See e.g. integrate-elements module
     * const { path } = await Forma.proposal.addElement({ urn })
     * const newUrn = mockRegisterElementInSystem() // See e.g. integrate-elements module
     * await Forma.proposal.replaceElement({ path, newUrn })
     */
    async replaceElement(request) {
        await this.#iframeMessenger.sendRequest("proposal/replace-element", request);
    }
    /**
     * Replace existing terrain on the proposal.
     *
     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.
     *
     * @example
     * const glb = createGlbSomehow()
     * await Forma.proposal.replaceTerrain(glb)
     */
    async replaceTerrain(request) {
        await this.#iframeMessenger.sendRequest("proposal/terrain/replace", request);
    }
    /**
     * Subscribe to changes in the proposal.
     *
     * @example
     * const { unsubscribe } = await Forma.proposal.subscribe(({ rootUrn }) => {
     *  console.log("updated urn is", rootUrn)
     * });
     *
     * @param callback event handler for each proposal change
     * @returns { unsubscribe: () => void } object with an `unsubscribe` method to stop listening
     */
    async subscribe(callback) {
        return await this.#iframeMessenger.createSubscription("proposal/on-change", callback);
    }
}
