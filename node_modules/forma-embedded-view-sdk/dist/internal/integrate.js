// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { EmbeddedViewSdk } from "./embedded-view.js";
/**
 * Create and upload elements to the integrate element system.
 *
 * @remarks
 * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.integrateElements | integrateElements}.
 */
export class IntegrateApi {
    #iframeMessenger;
    /** @hidden */
    constructor(iframeMessenger) {
        this.#iframeMessenger = iframeMessenger;
    }
    /**
     * Create a hierarchy of elements in the integrate element system.
     *
     * More information about the integrate element system can be seen
     * at https://aps.autodesk.com/en/docs/forma/v1/http-specification/integrate-api/
     *
     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.
     *
     * @returns ID, URN, and revision of the root element created.
     *
     * @example
     * const upload = await Forma.integrateElements.uploadFile({
     *   data: "glb data here...",
     * })
     *
     * const { urn } = await Forma.integrateElements.createElementHierarchy({
     *   data: {
     *     rootElement: "root",
     *     elements: {
     *       root: {
     *         id: "root",
     *         properties: {
     *           geometry: {
     *             type: "File",
     *             format: "glb",
     *             s3Id: upload.fileId,
     *           },
     *         },
     *       },
     *     },
     *   },
     * })
     *
     * console.log(`Created element: ${urn}`)
     */
    async createElementHierarchy(request) {
        return await this.#iframeMessenger.sendRequest("integrate/create-element-hierarchy", request);
    }
    /**
     * Upload a file to the integrate file storage. Files stored here are can only
     * be retrieved in relation to an element. An example of this is uploading a
     * geometric file - e.g. GLB or GeoJSON files.
     *
     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.
     *
     * @returns Unique identifier for the uploaded file.
     */
    async uploadFile(request) {
        return await this.#iframeMessenger.sendRequest("integrate/upload-file", request);
    }
}
