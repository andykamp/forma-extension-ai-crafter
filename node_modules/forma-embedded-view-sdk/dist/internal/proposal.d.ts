import type { IframeMessenger } from "./iframe-messenger.js";
/**
 * Access proposal metadata and add new elements to it.
 *
 * @remarks
 * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.proposal | proposal}.
 */
export declare class ProposalApi {
    #private;
    /** @hidden */
    constructor(iframeMessenger: IframeMessenger);
    /**
     * Fetch the top level URN for the proposal.
     *
     * @returns Root URN
     *
     * @example
     * const rootUrn = await Forma.proposal.getRootUrn()
     */
    getRootUrn(): Promise<string>;
    /**
     * Fetch the unique identifier of the proposal.
     *
     * @returns Proposal ID
     *
     * @example
     * const proposalId = await Forma.proposal.getId()
     */
    getId(): Promise<string>;
    /**
     * Add a new element to the proposal element tree.
     *
     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.
     *
     * @returns { path: string } object with the path of the new element
     *
     * @example
     * const urn = mockRegisterElementInSystem() // See e.g. integrate-elements module
     * const { path } = await Forma.proposal.addElement({ urn })
     */
    addElement(request: {
        /**
         * URN of the element to add.
         */
        urn: string;
        /**
         * Path to element whose children the new element should be added to.
         *
         * Currently the only supported parents are
         * - top-level of proposal (`"root"`)
         * - a base layer (`"root/<base key>"`)
         *
         * Defaults to "root".
         */
        parentPath?: string;
        /**
         * Flattened list of a standard 4x4 affine transform matrix in column-major order, to position the element relative to its parent.
         *
         * When the parent is proposal root, the project reference point is used as origin.
         *
         * Defaults to equivalent of 4x4 identity matrix.
         */
        transform?: number[];
        /**
         * Name of the element.
         */
        name?: string;
    }): Promise<{
        path: string;
    }>;
    /**
     * Replace an element in the proposal.
     *
     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.
     *
     * @example
     * const urn = mockRegisterElementInSystem() // See e.g. integrate-elements module
     * const { path } = await Forma.proposal.addElement({ urn })
     * const newUrn = mockRegisterElementInSystem() // See e.g. integrate-elements module
     * await Forma.proposal.replaceElement({ path, newUrn })
     */
    replaceElement(request: {
        /**
         * Path of the element you want to replace.
         *
         * The path is relative to the proposal element and starts with "root/".
         *
         * Currently the only supported parents are
         * - top-level of proposal (`"root"`)
         * - a base layer (`"root/<base key>"`)
         *
         * This will be the same value as the path returned from {@link ProposalApi.addElement | addElement}.
         */
        path: string;
        /**
         * URN of the new element.
         */
        urn: string;
    }): Promise<void>;
    /**
     * Replace existing terrain on the proposal.
     *
     * Requires edit access. See {@link EmbeddedViewSdk.getCanEdit | getCanEdit} for more info.
     *
     * @example
     * const glb = createGlbSomehow()
     * await Forma.proposal.replaceTerrain(glb)
     */
    replaceTerrain(request: {
        /** GLB file. */
        glb: ArrayBuffer;
    }): Promise<void>;
    /**
     * Subscribe to changes in the proposal.
     *
     * @example
     * const { unsubscribe } = await Forma.proposal.subscribe(({ rootUrn }) => {
     *  console.log("updated urn is", rootUrn)
     * });
     *
     * @param callback event handler for each proposal change
     * @returns { unsubscribe: () => void } object with an `unsubscribe` method to stop listening
     */
    subscribe(callback: (payload: {
        rootUrn: string;
    }) => void): Promise<{
        unsubscribe: () => void;
    }>;
}
