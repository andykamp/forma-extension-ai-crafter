import { RenderGlbApi } from "./renderGlb.js";
/**
 * Render objects in the 3D scene.
 *
 * @remarks
 * Available via {@link auto.Forma | Forma}.{@link index.EmbeddedViewSdk.render | render}.
 */
export class RenderApi {
    #iframeMessenger;
    glb;
    /** @hidden */
    constructor(iframeMessenger) {
        this.#iframeMessenger = iframeMessenger;
        this.glb = new RenderGlbApi(iframeMessenger);
    }
    /**
     * Add a mesh to the scene.
     *
     * @returns Unique identifier of the mesh object in the scene.
     *
     * @example
     * const {id} = await Forma.render.addMesh({ geometryData }),
     */
    async addMesh(request) {
        return await this.#iframeMessenger.sendRequest("scene/render/add-mesh", request);
    }
    /**
     * Upsert an mesh in the scene. If the mesh does not exist, it will be added.
     *
     * @example
     * await Forma.render.updateMesh({ id: "myPreviouslyAddedGlbId", geometryData })
     */
    async updateMesh(request) {
        await this.#iframeMessenger.sendRequest("scene/render/update-mesh", request);
    }
    /**
     * Remove an existing mesh from the scene.
     *
     * @example
     * await Forma.render.remove({ id: "myPreviouslyAddedMeshId" })
     */
    async remove(request) {
        await this.#iframeMessenger.sendRequest("scene/render/remove", request);
    }
    /**
     * Remove all meshes added by this API from the scene.
     *
     * Called automatically when the extension is unloaded.
     *
     * @example
     * await Forma.render.cleanup()
     */
    async cleanup() {
        await this.#iframeMessenger.sendRequest("scene/render/cleanup");
    }
}
